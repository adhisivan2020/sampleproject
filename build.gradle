/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java-library'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

//adding path detail for integration test - as it is not provided by Gradle defaults
sourceSets {
    integrationTest {
        java {

            //adding main and test output to compile test
            compileClasspath += main.output + test.output
            //adding main and test output to runtime path 
            runtimeClasspath += main.output + test.output
            //adding source directory path for integration test
            srcDir file('src/integration-test/java')
        }

        resources.srcDir file('src/integration-test/resources')
    }
}



dependencies {

    //compile subproject as the main project has dependency on it
    compile project(':subproj')

    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test and Mockito framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.+'

    integrationTestCompile 'org.assertj:assertj-core:3.0.0'
}

task integrationTest (type: Test){
    //adding path to class before running integration Test
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    //forcing to compile test code every time
    outputs.upToDateWhen { false }
}

configurations {
    //dependency for integrationTest extended from testImplementation
    integrationTestImplementation.extendsFrom testImplementation

    //setting up task dependency for newly created task
    check.dependsOn integrationTest

    //enforcing integration test to run after test task
    integrationTest.mustRunAfter test

}